#pragma once


// TODO: NULL and offsetof

namespace std {

  //using ::ptrdiff_t;
  //using ::size_t;
  using nullptr_t = decltype(nullptr);
  using max_align_t = long double;

  enum class byte : unsigned char { };

  constexpr byte operator|(byte a, byte b) noexcept {
    return static_cast<byte>(
        static_cast<unsigned char>(
          static_cast<unsigned int>(a) | static_cast<unsigned int>(b)
          ));
  }

  constexpr byte& operator|=(byte& a, byte b) noexcept {
    return a = a | b;
  }

  constexpr byte operator&(byte a, byte b) noexcept {
    return static_cast<byte>(
        static_cast<unsigned char>(
          static_cast<unsigned int>(a) & static_cast<unsigned int>(b)
          ));
  }

  constexpr byte& operator&=(byte& a, byte b) noexcept { 
    return a = a & b;
  }

  constexpr byte operator^(byte a, byte b) noexcept {
    return static_cast<byte>(
        static_cast<unsigned char>(
          static_cast<unsigned int>(a) ^ static_cast<unsigned int>(b)
          ));
  }

  constexpr byte& operator^=(byte& a, byte b) noexcept {
    return a = a ^ b;
  }

  constexpr byte operator~(byte b) noexcept {
    return static_cast<byte>(
        static_cast<unsigned char>(
          ~static_cast<unsigned int>(b)
          ));
  }

}

#include <type_traits> // SFINAE enabled member functions for std::byte is in type_traits
